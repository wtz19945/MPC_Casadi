//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// ComputeEllipseInfo.cpp
//
// Code generation for function 'ComputeEllipseInfo'
//

// Include files
#include "ComputeEllipseInfo.h"
#include <cmath>

// Function Definitions
void ComputeEllipseInfo(double xe, double xr, double xc, double ye, double yr,
                        double yc, double t, double lambda, double a, double b,
                        double f[3], double Jf[9])
{
  double t10;
  double t11;
  double t2;
  double t20;
  double t21;
  double t23;
  double t25;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  // ComputeEllipseInfo
  //     [F,Jf] = ComputeEllipseInfo(XE,XR,XC,YE,YR,YC,T,LAMBDA,A,B)
  //     This function was generated by the Symbolic Math Toolbox version 24.1.
  //     14-Aug-2024 15:03:53
  t2 = std::cos(t);
  t3 = std::sin(t);
  t6 = 1.0 / (a * a);
  t7 = 1.0 / (b * b);
  t4 = t2 * t2;
  t5 = t3 * t3;
  t10 = -xe + xc;
  t11 = -ye + yc;
  t20 = t2 * t10 + t3 * t11;
  t21 = t2 * t11 - t3 * t10;
  t10 = t2 * t3;
  t23 = lambda * (t10 * t6 * 2.0 - t10 * t7 * 2.0);
  t11 = t2 * t6 * t20 * 2.0;
  t25 = t3 * t6 * t20 * 2.0;
  t2 = t2 * t7 * t21 * 2.0;
  t10 = t3 * t7 * t21 * 2.0;
  f[0] = (xe * 2.0 - xr * 2.0) - lambda * (t11 - t10);
  f[1] = (ye * 2.0 - yr * 2.0) - lambda * (t25 + t2);
  f[2] = (t6 * (t20 * t20) + t7 * (t21 * t21)) - 1.0;
  t11 = -t11 + t10;
  t10 = -t25 - t2;
  Jf[0] = lambda * (t4 * t6 * 2.0 + t5 * t7 * 2.0) + 2.0;
  Jf[1] = t23;
  Jf[2] = t11;
  Jf[3] = t23;
  Jf[4] = lambda * (t4 * t7 * 2.0 + t5 * t6 * 2.0) + 2.0;
  Jf[5] = t10;
  Jf[6] = t11;
  Jf[7] = t10;
  Jf[8] = 0.0;
}

// End of code generation (ComputeEllipseInfo.cpp)
